const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const mysql = require("mysql2/promise");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5001;


app.use(cors());
app.use(bodyParser.json());

let db;
(async () => {
  try {
    db = await mysql.createPool({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASS,
      database: process.env.DB_NAME,
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0,
    });

    console.log("✅ Connected to MySQL");

    
    await db.query(`
      CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) NOT NULL,
        password VARCHAR(255) NOT NULL
      )
    `);
    console.log("✅ Users table ready");
  } catch (err) {
    console.error("❌ MySQL connection error:", err);
    process.exit(1);
  }
})();


app.get("/users/:username", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT id, username, email FROM users WHERE username = ?", [req.params.username]);
    if (rows.length === 0) return res.status(404).json({ message: "User not found" });
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});

app.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ message: "All fields are required" });

  try {
    const [existing] = await db.query("SELECT id FROM users WHERE username = ?", [username]);
    if (existing.length > 0) return res.status(400).json({ message: "Username already exists" });

    const hashedPassword = await bcrypt.hash(password, 8);
    await db.query("INSERT INTO users (username, email, password) VALUES (?, ?, ?)", [username, email, hashedPassword]);
    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});


app.post("/add-user", async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ message: "All fields are required" });

  try {
    const [existing] = await db.query("SELECT id FROM users WHERE username = ?", [username]);
    if (existing.length > 0) return res.status(400).json({ message: "Username already exists" });

    const hashedPassword = await bcrypt.hash(password, 8);
    await db.query("INSERT INTO users (username, email, password) VALUES (?, ?, ?)", [username, email, hashedPassword]);
    res.status(201).json({ message: "Dashboard user added successfully" });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});

app.get("/dashboard/add-users", async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 5;
  const offset = (page - 1) * limit;

  try {
    const [users] = await db.query("SELECT id, username, email FROM users LIMIT ? OFFSET ?", [limit, offset]);
    const [countResult] = await db.query("SELECT COUNT(*) as total FROM users");
    const totalUsers = countResult[0].total;
    const totalPages = Math.ceil(totalUsers / limit);

    res.json({ page, limit, totalUsers, totalPages, users });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});


app.post("/login", async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) return res.status(400).json({ message: "All fields are required" });

  try {
    const [rows] = await db.query("SELECT * FROM users WHERE username = ?", [username]);
    if (rows.length === 0) return res.status(400).json({ message: "Invalid username" });

    const user = rows[0];
    if (user.email !== email) return res.status(400).json({ message: "Invalid email" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Invalid password" });

    const token = jwt.sign({ id: user.id, username: user.username, email: user.email }, process.env.JWT_SECRET);

    const { password: _, ...userWithoutPassword } = user;
    res.status(200).json({ message: "Login successful", user: userWithoutPassword, token });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});


app.put("/users/:username", async (req, res) => {
  const { username } = req.params;
  const { newUsername, newEmail } = req.body;

  if (!newUsername || !newEmail) return res.status(400).json({ message: "Both new username and email are required" });

  try {
    const [existing] = await db.query("SELECT id FROM users WHERE username = ?", [newUsername]);
    if (existing.length > 0 && existing[0].username !== username) return res.status(400).json({ message: "Username already exists" });

    const [result] = await db.query("UPDATE users SET username = ?, email = ? WHERE username = ?", [
      newUsername,
      newEmail,
      username,
    ]);

    if (result.affectedRows === 0) return res.status(404).json({ message: "User not found" });

    res.json({ message: "User updated successfully" });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});


app.delete("/users/:username", async (req, res) => {
  const { username } = req.params;
  try {
    const [result] = await db.query("DELETE FROM users WHERE username = ?", [username]);
    if (result.affectedRows === 0) return res.status(404).json({ message: "User not found" });
    res.json({ message: "User deleted successfully" });
  } catch (err) {
    res.status(500).json({ message: "server error" });
  }
});


app.listen(PORT, () => {
  console.log(`🚀 MySQL API running at http://localhost:${PORT}`);
});
